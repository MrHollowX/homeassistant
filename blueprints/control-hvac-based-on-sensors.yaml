blueprint:
  name: HVAC Control on Door/Window State
  description: >-
    Manages HVAC based on the state of specified door/window sensors and the current season.

    - In Winter: Sets a climate device to a specific preset mode when a sensor is open, and returns it to a closed state preset (or its previous state) when all are closed.
    
    - In Summer: Turns off an AC unit when a sensor is open (and remembers it was on), then turns it back on when all sensors are closed.
    
    version: 0.3
  domain: automation
  author: MrHollow
  source_url: https://github.com/home-assistant/core/blob/dev/homeassistant/components/automation/blueprints/motion_light.yaml
  input:
    opening_sensors:
      name: Opening Sensors
      description: The door and/or window sensors to monitor.
      selector:
        entity:
          multiple: true
          domain: binary_sensor
    open_delay:
      name: Open Delay
      description: The time in seconds to wait after a sensor opens before running the "open" actions.
      default: 30
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds
    close_delay:
      name: Close Delay
      description: The time in seconds to wait after a sensor closes before running the "closed" actions.
      default: 30
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds
    season_selector:
      name: Season Selector (Input Boolean)
      description: An Input Boolean helper that is 'on' for summer and 'off' for winter.
      selector:
        entity:
          domain: input_boolean
    winter_climate_device:
      name: Winter Climate Device
      description: The heater/climate entity to control in the winter.
      selector:
        entity:
          domain: climate
    summer_climate_device:
      name: Summer Climate Device (AC)
      description: The AC/climate entity to control in the summer.
      selector:
        entity:
          domain: climate
    summer_ac_last_state_helper:
      name: Summer AC "Last State" Helper
      description: An Input Boolean used to remember if the AC was on before a sensor was opened.
      selector:
        entity:
          domain: input_boolean
    # New Inputs for Winter Preset Mode Control
    restore_previous_mode:
      name: (Winter) Restore Previous Preset Mode
      description: If ON, the blueprint will save the climate device's preset mode before changing it, and restore it when closed. If OFF, it will use the fixed dropdown values below.
      selector:
        boolean: {}
      default: false
    last_preset_helper:
      name: (Winter) Last Preset Helper
      description: (Required if 'Restore' is ON) The input_text helper used to store the last preset mode.
      selector:
        entity:
          domain: input_text
    open_preset_mode:
      name: (Winter) Open Preset Mode
      description: The preset mode to set when a sensor is opened (used if 'Restore' is OFF).
      selector:
        select:
          options:
            - "building_protection"
            - "comfort"
            - "economy"
            - "standby"
      default: "building_protection"
    closed_preset_mode:
      name: (Winter) Closed Preset Mode
      description: The preset mode to set when all sensors are closed (used if 'Restore' is OFF).
      selector:
        select:
          options:
            - "building_protection"
            - "comfort"
            - "economy"
            - "standby"
      default: "comfort"

variables:
  opening_sensors: !input opening_sensors
  summer_climate_device: !input summer_climate_device
  winter_climate_device: !input winter_climate_device
  restore_previous_mode: !input restore_previous_mode
  last_preset_helper: !input last_preset_helper

trigger:
  - platform: state
    entity_id: !input opening_sensors
    to: 'on'
    for:
      seconds: !input open_delay
  - platform: state
    entity_id: !input opening_sensors
    to: 'off'
    for:
      seconds: !input close_delay

action:
  - choose:
      # This block runs when a door or window is OPENED
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          - choose:
              # "Winter" actions (sensor opened)
              - conditions:
                  - condition: state
                    entity_id: !input season_selector
                    state: "off"
                sequence:
                  - choose:
                      # If restore mode is on, save the current state first
                      - conditions:
                          - condition: template
                            value_template: "{{ restore_previous_mode }}"
                        sequence:
                          - service: input_text.set_value
                            target:
                              entity_id: !input last_preset_helper
                            data:
                              value: "{{ state_attr(winter_climate_device, 'preset_mode') }}"
                  - service: climate.set_preset_mode
                    target:
                      entity_id: !input winter_climate_device
                    data:
                      preset_mode: !input open_preset_mode
              # "Summer" actions (sensor opened)
              - conditions:
                  - condition: state
                    entity_id: !input season_selector
                    state: "on"
                  - condition: template
                    value_template: "{{ not is_state(summer_climate_device, 'off') }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input summer_climate_device
                  - service: input_boolean.turn_on
                    target:
                      entity_id: !input summer_ac_last_state_helper

      # This block runs when a door or window is CLOSED and checks if ALL are closed
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
          - condition: template
            value_template: "{{ expand(opening_sensors) | selectattr('state', 'eq', 'off') | list | count == expand(opening_sensors) | list | count }}"
        sequence:
          - choose:
              # "Winter" actions (all sensors closed)
              - conditions:
                  - condition: state
                    entity_id: !input season_selector
                    state: "off"
                sequence:
                  - choose:
                      # If restore is on and the helper has a valid state, restore it
                      - conditions:
                          - condition: template
                            value_template: "{{ restore_previous_mode and states(last_preset_helper) not in ['unknown', 'unavailable', ''] }}"
                        sequence:
                          - service: climate.set_preset_mode
                            target:
                              entity_id: !input winter_climate_device
                            data:
                              preset_mode: "{{ states(last_preset_helper) }}"
                    # If restore is off (or helper was empty), use the fixed closed preset
                    default:
                      - service: climate.set_preset_mode
                        target:
                          entity_id: !input winter_climate_device
                        data:
                          preset_mode: !input closed_preset_mode
              # "Summer" actions (all sensors closed)
              - conditions:
                  - condition: state
                    entity_id: !input season_selector
                    state: "on"
                  - condition: state
                    entity_id: !input summer_ac_last_state_helper
                    state: "on"
                sequence:
                  - service: climate.turn_on
                    target:
                      entity_id: !input summer_climate_device
                  - service: input_boolean.turn_off
                    target:
                      entity_id: !input summer_ac_last_state_helper
mode: single

